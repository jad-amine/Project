{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Perfect DL  102 - Pima_binary_classification","provenance":[{"file_id":"17_KkIYEgXnMMCYwf-whn1Bqfvpm4nXjU","timestamp":1630753043319}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"R4CKPiy5eePy"},"source":["Â© 2021 Zaka AI, Inc. All Rights Reserved"]},{"cell_type":"markdown","metadata":{"id":"sRIDoDPqJyUr"},"source":["#Binary Classification\n","\n","**Objective:** The goal of this notebook is to build, train and evaluate a Deep Learning (DL) model on a real dataset. We will be doing a binary classification, which means the output of our neural network will be one neuron emitting either a 0 or 1.\n","\n","The required libraries for this exercise are `Keras` for building and training the DL model, `Numpy` for numerical handling and loading of the dataset and `scikit-learn` for validation and datasplit."]},{"cell_type":"markdown","metadata":{"id":"D7hsqQL6mXG0"},"source":["## 1. Load data\n","\n","In this notebook, we are going to use the **Pima Indians diabetes** dataset. This is a standard machine learning dataset from the UCI Machine Learning repository. It describes patient medical record data for Pima Indians and whether they had an onset of diabetes within five years.\n","\n","As such, it is a binary classification problem (onset of diabetes as 1 or not as 0). All of the input variables that describe each patient are numerical. \n","\n","This makes it easy to use directly with neural networks that expect numerical input and output values, and ideal for our first neural network in Keras.\n","\n","The variables can be summarized as follows:\n","\n","**Input Variables (X):**\n","\n","\n","1.   Number of times pregnant\n","2.   Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n","3.   Diastolic blood pressure (mm Hg)\n","4.   Triceps skin fold thickness (mm)\n","5.   2-Hour serum insulin (mu U/ml)\n","6.   Body mass index (weight in kg/(height in m)^2)\n","7.   Diabetes pedigree function\n","8.   Age (years)\n","\n","Output Variables (Y):\n","\n","*   Class variable (0 or 1)\n","\n"]},{"cell_type":"code","metadata":{"id":"HuVahF7eloMV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630753199535,"user_tz":-180,"elapsed":1100,"user":{"displayName":"Jad Amine","photoUrl":"","userId":"00459602751847274033"}},"outputId":"a80580c3-e280-44ef-ca29-fe85d7e95656"},"source":["# clone git repo\n","!git clone https://github.com/zaka-ai/intro2dl.git\n","\n","# change directory\n","%cd intro2dl/data/"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'intro2dl'...\n","remote: Enumerating objects: 16, done.\u001b[K\n","remote: Counting objects: 100% (16/16), done.\u001b[K\n","remote: Compressing objects: 100% (15/15), done.\u001b[K\n","remote: Total 16 (delta 1), reused 7 (delta 0), pack-reused 0\u001b[K\n","Unpacking objects: 100% (16/16), done.\n","/content/intro2dl/data\n"]}]},{"cell_type":"code","metadata":{"id":"NIu3Id57luLl","executionInfo":{"status":"ok","timestamp":1630753212951,"user_tz":-180,"elapsed":1277,"user":{"displayName":"Jad Amine","photoUrl":"","userId":"00459602751847274033"}}},"source":["import numpy\n","\n","# load pima indians dataset\n","dataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n","\n","# split into input (X) and output (Y) variables\n","X = dataset[:,0:8]\n","Y = dataset[:,8]"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FWrfBdRKnKlk"},"source":["## 2. Define Keras Model\n","\n","Create a Keras Sequential model that has 2 hidden layers, with the `relu` activation function."]},{"cell_type":"code","metadata":{"id":"HxsfruZnnSH8","executionInfo":{"status":"ok","timestamp":1630753747912,"user_tz":-180,"elapsed":4,"user":{"displayName":"Jad Amine","photoUrl":"","userId":"00459602751847274033"}}},"source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","\n","def create_model():\n","  # create model\n","  model = Sequential()\n","  model.add(Dense(12, input_dim = 8, activation = 'relu'))\n","  model.add(Dense(8, activation = 'relu'))\n","  model.add(Dense(1, activation = 'sigmoid'))\n","  return model\n"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"m89-8lpfnenc"},"source":["## 3. Train Model\n","\n","Before training the model, we have to make sure it's compiled!\n","\n","Training occurs over epochs and each epoch is split into batches.\n","\n","*   **Epoch**: One pass through all of the rows in the training dataset.\n","*   **Batch**: One or more samples considered by the model within an epoch before weights are updated\n","\n","\n","Let's train the model for 150 epochs with batch size equals to 10."]},{"cell_type":"code","metadata":{"id":"rOX9fIslng06","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630754552551,"user_tz":-180,"elapsed":21713,"user":{"displayName":"Jad Amine","photoUrl":"","userId":"00459602751847274033"}},"outputId":"8c8f0691-4ae5-4d9c-f58f-01c20de9b1c3"},"source":["model = create_model()\n","\n","# Compile model with binary crossentropy\n","model.compile(optimizer = \"adam\", \n","              loss = \"binary_crossentropy\",\n","              metrics = [\"accuracy\"])\n","\n","# Fit the model\n","model.fit(X, Y, epochs = 150, batch_size = 10)\n","print(\"Model trained!\")"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/150\n","77/77 [==============================] - 1s 1ms/step - loss: 1.7387 - accuracy: 0.5547\n","Epoch 2/150\n","77/77 [==============================] - 0s 1ms/step - loss: 1.2693 - accuracy: 0.5872\n","Epoch 3/150\n","77/77 [==============================] - 0s 1ms/step - loss: 1.0710 - accuracy: 0.6159\n","Epoch 4/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.9664 - accuracy: 0.6224\n","Epoch 5/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.8447 - accuracy: 0.6432\n","Epoch 6/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.8174 - accuracy: 0.6354\n","Epoch 7/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.7599 - accuracy: 0.6589\n","Epoch 8/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.7587 - accuracy: 0.6654\n","Epoch 9/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.7500 - accuracy: 0.6862\n","Epoch 10/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.7505 - accuracy: 0.6562\n","Epoch 11/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.6982 - accuracy: 0.6888\n","Epoch 12/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.6903 - accuracy: 0.6719\n","Epoch 13/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6728 - accuracy: 0.6836\n","Epoch 14/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6663 - accuracy: 0.6979\n","Epoch 15/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6704 - accuracy: 0.6914\n","Epoch 16/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6178 - accuracy: 0.7005\n","Epoch 17/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.6336 - accuracy: 0.6862\n","Epoch 18/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6477 - accuracy: 0.7044\n","Epoch 19/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6493 - accuracy: 0.6784\n","Epoch 20/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6588 - accuracy: 0.6888\n","Epoch 21/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.6046 - accuracy: 0.7083\n","Epoch 22/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.6243 - accuracy: 0.6940\n","Epoch 23/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5926 - accuracy: 0.7109\n","Epoch 24/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6328 - accuracy: 0.6914\n","Epoch 25/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6065 - accuracy: 0.6992\n","Epoch 26/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5903 - accuracy: 0.7240\n","Epoch 27/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5957 - accuracy: 0.6979\n","Epoch 28/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6563 - accuracy: 0.6888\n","Epoch 29/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.6558 - accuracy: 0.6862\n","Epoch 30/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5959 - accuracy: 0.7005\n","Epoch 31/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5960 - accuracy: 0.7292\n","Epoch 32/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6681 - accuracy: 0.6953\n","Epoch 33/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5624 - accuracy: 0.7461\n","Epoch 34/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6031 - accuracy: 0.7201\n","Epoch 35/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5969 - accuracy: 0.7083\n","Epoch 36/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5805 - accuracy: 0.7057\n","Epoch 37/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5922 - accuracy: 0.7109\n","Epoch 38/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5874 - accuracy: 0.7188\n","Epoch 39/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6074 - accuracy: 0.7227\n","Epoch 40/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.6044 - accuracy: 0.7109\n","Epoch 41/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5808 - accuracy: 0.7174\n","Epoch 42/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5726 - accuracy: 0.7279\n","Epoch 43/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.6144 - accuracy: 0.6979\n","Epoch 44/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.7138 - accuracy: 0.6862\n","Epoch 45/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5509 - accuracy: 0.7214\n","Epoch 46/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5697 - accuracy: 0.7161\n","Epoch 47/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5571 - accuracy: 0.7253\n","Epoch 48/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5669 - accuracy: 0.7201\n","Epoch 49/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5311 - accuracy: 0.7448\n","Epoch 50/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5678 - accuracy: 0.7266\n","Epoch 51/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5792 - accuracy: 0.7266\n","Epoch 52/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5494 - accuracy: 0.7201\n","Epoch 53/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5568 - accuracy: 0.7201\n","Epoch 54/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5707 - accuracy: 0.7409\n","Epoch 55/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5615 - accuracy: 0.7227\n","Epoch 56/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5329 - accuracy: 0.7552\n","Epoch 57/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5311 - accuracy: 0.7396\n","Epoch 58/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5582 - accuracy: 0.7161\n","Epoch 59/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5623 - accuracy: 0.7161\n","Epoch 60/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5353 - accuracy: 0.7474\n","Epoch 61/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5246 - accuracy: 0.7552\n","Epoch 62/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5466 - accuracy: 0.7253\n","Epoch 63/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5389 - accuracy: 0.7344\n","Epoch 64/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5550 - accuracy: 0.7240\n","Epoch 65/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5347 - accuracy: 0.7292\n","Epoch 66/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5611 - accuracy: 0.7357\n","Epoch 67/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5206 - accuracy: 0.7500\n","Epoch 68/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5646 - accuracy: 0.7357\n","Epoch 69/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5656 - accuracy: 0.7409\n","Epoch 70/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5300 - accuracy: 0.7461\n","Epoch 71/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5489 - accuracy: 0.7370\n","Epoch 72/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5146 - accuracy: 0.7500\n","Epoch 73/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5672 - accuracy: 0.7279\n","Epoch 74/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5153 - accuracy: 0.7448\n","Epoch 75/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5199 - accuracy: 0.7474\n","Epoch 76/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5231 - accuracy: 0.7448\n","Epoch 77/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5446 - accuracy: 0.7461\n","Epoch 78/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5234 - accuracy: 0.7435\n","Epoch 79/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5409 - accuracy: 0.7279\n","Epoch 80/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5282 - accuracy: 0.7487\n","Epoch 81/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5570 - accuracy: 0.7500\n","Epoch 82/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5224 - accuracy: 0.7318\n","Epoch 83/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5190 - accuracy: 0.7461\n","Epoch 84/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5537 - accuracy: 0.7448\n","Epoch 85/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5522 - accuracy: 0.7422\n","Epoch 86/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5093 - accuracy: 0.7396\n","Epoch 87/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5330 - accuracy: 0.7474\n","Epoch 88/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5202 - accuracy: 0.7513\n","Epoch 89/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5481 - accuracy: 0.7292\n","Epoch 90/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5452 - accuracy: 0.7435\n","Epoch 91/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5242 - accuracy: 0.7565\n","Epoch 92/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5082 - accuracy: 0.7526\n","Epoch 93/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5217 - accuracy: 0.7422\n","Epoch 94/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5236 - accuracy: 0.7435\n","Epoch 95/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5433 - accuracy: 0.7656\n","Epoch 96/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5395 - accuracy: 0.7578\n","Epoch 97/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5130 - accuracy: 0.7565\n","Epoch 98/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5139 - accuracy: 0.7500\n","Epoch 99/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5130 - accuracy: 0.7487\n","Epoch 100/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5522 - accuracy: 0.7474\n","Epoch 101/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5006 - accuracy: 0.7617\n","Epoch 102/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5226 - accuracy: 0.7435\n","Epoch 103/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5243 - accuracy: 0.7604\n","Epoch 104/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5066 - accuracy: 0.7435\n","Epoch 105/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5125 - accuracy: 0.7461\n","Epoch 106/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5097 - accuracy: 0.7617\n","Epoch 107/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.4992 - accuracy: 0.7708\n","Epoch 108/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5406 - accuracy: 0.7500\n","Epoch 109/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4978 - accuracy: 0.7604\n","Epoch 110/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5060 - accuracy: 0.7500\n","Epoch 111/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.4890 - accuracy: 0.7656\n","Epoch 112/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5136 - accuracy: 0.7552\n","Epoch 113/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5151 - accuracy: 0.7565\n","Epoch 114/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.5324 - accuracy: 0.7500\n","Epoch 115/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5061 - accuracy: 0.7643\n","Epoch 116/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5301 - accuracy: 0.7565\n","Epoch 117/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4825 - accuracy: 0.7669\n","Epoch 118/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4908 - accuracy: 0.7682\n","Epoch 119/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.4832 - accuracy: 0.7617\n","Epoch 120/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.4826 - accuracy: 0.7721\n","Epoch 121/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4902 - accuracy: 0.7487\n","Epoch 122/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4993 - accuracy: 0.7760\n","Epoch 123/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5145 - accuracy: 0.7292\n","Epoch 124/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5276 - accuracy: 0.7474\n","Epoch 125/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4957 - accuracy: 0.7695\n","Epoch 126/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4801 - accuracy: 0.7591\n","Epoch 127/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4920 - accuracy: 0.7487\n","Epoch 128/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5412 - accuracy: 0.7552\n","Epoch 129/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4998 - accuracy: 0.7617\n","Epoch 130/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4853 - accuracy: 0.7500\n","Epoch 131/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.4921 - accuracy: 0.7669\n","Epoch 132/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4891 - accuracy: 0.7682\n","Epoch 133/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4971 - accuracy: 0.7370\n","Epoch 134/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4906 - accuracy: 0.7565\n","Epoch 135/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4856 - accuracy: 0.7682\n","Epoch 136/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4667 - accuracy: 0.7734\n","Epoch 137/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.4710 - accuracy: 0.7760\n","Epoch 138/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.5189 - accuracy: 0.7539\n","Epoch 139/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4870 - accuracy: 0.7669\n","Epoch 140/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4699 - accuracy: 0.7721\n","Epoch 141/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4734 - accuracy: 0.7760\n","Epoch 142/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4869 - accuracy: 0.7630\n","Epoch 143/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4756 - accuracy: 0.7734\n","Epoch 144/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4780 - accuracy: 0.7721\n","Epoch 145/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4817 - accuracy: 0.7773\n","Epoch 146/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.4834 - accuracy: 0.7604\n","Epoch 147/150\n","77/77 [==============================] - 0s 2ms/step - loss: 0.4732 - accuracy: 0.7695\n","Epoch 148/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4786 - accuracy: 0.7630\n","Epoch 149/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4794 - accuracy: 0.7656\n","Epoch 150/150\n","77/77 [==============================] - 0s 1ms/step - loss: 0.4694 - accuracy: 0.7578\n","Model trained!\n"]}]},{"cell_type":"markdown","metadata":{"id":"Q8GuQLxVnmLs"},"source":["## 4. Evaluate Model\n","\n","We have trained our neural network on the entire dataset and we can evaluate the performance of the network on the same dataset.\n","\n","\n","This will only give us an idea of how well we have modeled the dataset, but no idea of how well the algorithm might perform on new data."]},{"cell_type":"code","metadata":{"id":"_KvwAijVnk8p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630754656725,"user_tz":-180,"elapsed":352,"user":{"displayName":"Jad Amine","photoUrl":"","userId":"00459602751847274033"}},"outputId":"f1d3d549-d1fc-4436-d4b4-0d58b260c0d1"},"source":["# evaluate the model\n","scores = model.evaluate(X, Y)\n","print(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["24/24 [==============================] - 0s 1ms/step - loss: 0.4763 - accuracy: 0.7656\n","\n","accuracy: 76.56%\n"]}]},{"cell_type":"markdown","metadata":{"id":"8M-sc-xjnq1M"},"source":["## 5. Make Predictions\n","\n","Making predictions is as easy as calling the ***predict()*** function on the model. We are using a sigmoid activation function on the output layer, so the predictions will be a probability in the range between 0 and 1. We can easily convert them into a crisp binary prediction for this classification task by rounding them.\n","\n","**Correction:** The function **predict_classes()** has been deprecated since the recording of the video and has been updated in the notebook link below and replaced with **predict** and **numpy.where**\n","\n","\n","We can use ***numpy.where*** on the probability output to predict crisp classes directly by setting a threshold of 0.5. \n","So any prediction above the threshold is assigned to 1, otherwise 0."]},{"cell_type":"code","metadata":{"id":"QOSjMfECn29G"},"source":["# make class predictions with the model\n","#returned values are float\n","predictions = model.predict(X)\n","#set the threshold and convert predictions \n","threshold=0.5\n","classes=numpy.where(predictions > threshold, 1,0)\n","\n","\n","# summarize the first 5 cases\n","for i in range(5):\n","\tprint('%s => %d (expected %d)' % (X[i].tolist(), classes[i], Y[i]))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RfXssV5BpfeJ"},"source":["# Automatic data split\n","\n","Let's update the code to train the model on a sub-set of the whole dataset (the training set) and use another part for evaluation.\n","\n","We'll use 67% for training and 33% for testing."]},{"cell_type":"code","metadata":{"id":"zlddJn9Yprjd"},"source":["# create new model\n","model = create_model()\n","\n","# compile the model\n","model.compile(loss = \"binary_crossentropy\", optimizer = \"adam\", metrics = ['accuracy'])\n","\n","# Fit the model\n","model.fit(X, Y, validation_split=0.33, epochs=150, batch_size=10)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"trISU5HyoK3N"},"source":["# Manual Data Split\n","\n","Evaluate the model with manual data split. Let's also use 67% for training and 33% for testing.\n"]},{"cell_type":"code","metadata":{"id":"IfXkri28JwSl"},"source":["from sklearn.model_selection import train_test_split\n","\n","# split into 67% for train and 33% for test\n","\n","#create a new model\n","\n","#compile the model\n","\n","#train the model\n"],"execution_count":null,"outputs":[]}]}